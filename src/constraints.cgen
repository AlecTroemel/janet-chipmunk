($
 (use /codes)
 (set-lib-name "constraints"))

($
 # Joints
 (defj cpPinJointNew
   "a and b are the two bodies to connect, and anchorA and anchorB are the anchor points on those bodies. The distance between the two anchor points is measured when the joint is created."
   [(cpBody a) (cpBody b) (cpVect anchorA) (cpVect anchorB)] (cpConstraint rconstraint))

 (defj cpSlideJointNew
   "a and b are the two bodies to connect, anchorA and anchorB are the anchor points on those bodies, and min and max define the allowed distances of the anchor points."
   [(cpBody a) (cpBody b) (cpVect anchorA) (cpVect anchorB) (float min) (float max)]
   (cpConstraint rconstraint))

 (defj cpPivotJointNew
   "a and b are the two bodies to connect, and pivot is the point in world coordinates of the pivot."
   [(cpBody a) (cpBody b) (cpVect pivot)]
   (cpConstraint rconstraint))

 (defj cpGrooveJointNew
   "The groove goes from groov_a to groove_b on body a, and the pivot is attached to anchorB on body b."
   [(cpBody a) (cpBody b) (cpVect groove_a) (cpVect groove_b) (cpVect anchorB)]
   (cpConstraint rconstraint))

 (defj cpDampedSpringNew
   "Defined much like a slide joint. restLength is the distance the spring wants to be, stiffness is the spring constant (Young’s modulus), and damping is how soft to make the damping of the spring."
   [(cpBody a) (cpBody b) (cpVect anchorA) (cpVect anchorB) (float restLength) (float stiffness) (float damping)]
   (cpConstraint rconstraint))

 (defj cpDampedRotarySpringNew
   "Like a damped spring, but works in an angular fashion. restAngle is the relative angle in radians that the bodies want to have, stiffness and damping work basically the same as on a damped spring."
   [(cpBody a) (cpBody b) (float restAngle) (float stiffness) (float damping)]
   (cpConstraint rconstraint))

 (defj cpRatchetJointNew
   "Works like a socket wrench. ratchet is the distance between 'clicks', phase is the initial offset to use when deciding where the ratchet angles are."
   [(cpBody a) (cpBody b) (float phase) (float ratchet)]
   (cpConstraint rconstraint))

 (defj cpGearJointNew
   "Keeps the angular velocity ratio of a pair of bodies constant. ratio is always measured in absolute terms. It is currently not possible to set the ratio in relation to a third body’s angular velocity. phase is the initial angular offset of the two bodies."
   [(cpBody a) (cpBody b) (float phase) (float ratio)]
   (cpConstraint rconstraint))

 (defj cpRotaryLimitJointNew
   "Constrains the relative rotations of two bodies. min and max are the angular limits in radians. It is implemented so that it’s possible to for the range to be greater than a full revolution."
   [(cpBody a) (cpBody b) (float min) (float max)]
   (cpConstraint rconstraint))

 (defj cpSimpleMotorNew
   "Keeps the relative angular velocity of a pair of bodies constant. rate is the desired relative angular velocity. You will usually want to set an force (torque) maximum for motors as otherwise they will be able to apply a nearly infinite torque to keep the bodies moving."
   [(cpBody a) (cpBody b) (float rate)]
   (cpConstraint rconstraint))

 (cfuns-entry))
